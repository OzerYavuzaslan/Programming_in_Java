server.port = 8081
spring.application.name=stock-service


#----------DB & JPA & Hibernate----------#
spring.datasource.url=jdbc:postgresql://localhost:5432/ecommercedb
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.h2.console.enabled=true


spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.data-platform=org.hibernate.dialect.PostgreSQLDialect

#----------REDIS----------#
spring.cache.type = redis
spring.redis.host = localhost
spring.redis.port = 6379
spring.cache.redis.cache-null-values = true
#spring.cache.redis.time-to-live=40000


#----------CONSTANTS----------#
stock.get.endpoint = /getByProductId/{id}
category.get.endpoint = /getByCategoryId/{id}

stock.cache.name = stocks
category.cache.name = categories

total.errors = Total Error(s): 
first.error = First Error: 
stock.not.found = The requested stock is not found! Consider adding new stock.
category.not.found = The requested category is not found! Consider adding new category.
stock.amount.not.enough = There is no enough stock to take the requested amount of the product!


unique.constraint.violation = Do not attempt to create new products or categories on existing products. Already existed!
unique.constraint.violation.sql.code = 23505