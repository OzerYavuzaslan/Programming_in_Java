#server.port = 8080
spring.application.name=order-service
##logging.level.root=DEBUG
#logging.level.org.springframework.web=INFO
#logging.level.org.hibernate=ERROR
#logging.level.com.ozeryavuzaslan.orderservice=DEBUG


#----------CONFIG-SERVER----------#
spring.config.import=optional:configserver:http://localhost:8130

#----------EUREKA----------#
#eureka.instance.client.serverUrl.defaultZone = http://localhost:8761:eureka/


#----------DB & JPA & Hibernate----------#
#spring.datasource.url=jdbc:mysql://localhost:3306/ecommerce_db
#spring.datasource.username=admin
#spring.datasource.password=mysql

#spring.jpa.show-sql = true
#spring.jpa.hibernate.ddl-auto = update
#spring.jpa.properties.hibernate.format_sql = true
#spring.jpa.properties.hibernate.use_sql_comments = true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect


#----------KAFKA----------#
#bootstrap.server = 127.0.0.1:9092
#kafka.order.topic = order_topic


#----------RABBITMQ----------#
#spring.rabbitmq.host = localhost
#spring.rabbitmq.port = 5672
#spring.rabbitmq.username = guest
#spring.rabbitmq.password = guest


#----------ACTUATOR----------#
#management.health.circuitbreakers.enabled=true
##management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.include=health, bus-refresh
#management.endpoint.health.show-details=always


#----------CIRCUIT BREAKER----------#
#resilience4j.circuitbreaker.instances.order-service.registerHealthIndicator=true
##resilience4j.circuitbreaker.instances.order-service.ignoreExceptions=feign.FeignException.UnprocessableEntity
##resilience4j.circuitbreaker.instances.order-service.failureRateThreshold=100
##resilience4j.circuitbreaker.instances.order-service.minimumNumberOfCalls=5
##resilience4j.circuitbreaker.instances.order-service.automaticTransitionFromOpenToHalfOpenEnabled=true
##resilience4j.circuitbreaker.instances.order-service.waitDurationInOpenState=5s
##resilience4j.circuitbreaker.instances.order-service.permittedNumberOfCallsInHalfOpenState=3
##resilience4j.circuitbreaker.instances.order-service.slidingWindowSize=10
##resilience4j.circuitbreaker.instances.order-service.slidingWindowType=COUNT_BASED
##resilience4j.circuitbreaker.instances.order-service.recordExceptions=java.lang.Exception
##logging.level.io.github.resilience4j.circuitbreaker=DEBUG
##logging.level.root=WARN


#----------FEIGN CLIENT----------#
#feign.client.config.default.connectTimeout=5000
#feign.client.config.default.readTimeout=30000
#feign.circuitbreaker.enabled=true


#----------CLIENT ENDPOINTS----------#
#base.endpoint =/api/v1
#stock.base.endpoint =/stocks
#reserve.stock.reserve.products.endpoint =/reserveProducts
#stock.decrease.stocks.endpoint =/decreaseStocks
#reserve.stock.rollback.reserved.stock.endpoint =/rollbackReservedStocks
#stock.rollback.decreased.stock.endpoint =/updateStocks
#path.variable.order.id =/{orderid}
#reserve.stock.get.by.order.id.endpoint =/getByOrderId
#reserve.rollback.stock.and.reserved.stocks.by.order.id.endpoint =/rollbackStocksAndReservedStocks
#
#revenue.base.endpoint =/revenues
#revenue.tax.rate.base.endpoint =/taxRate
#revenue.get.specific.tax.rate.endpoint =/getSpecificTaxRate
#
#payment.base.endpoint =/payments
#payment.stripe.base.endpoint =/stripe
#payment.pay.endpoint =/pay
#payment.refund.endpoint =/refund


#----------CONSTANTS----------#
#order.get.by.id.endpoint =/getByOrderId/{orderid}
#
#
#first.error = First Error:
#total.errors = Total Error(s):
#
#base.service.not.running.exception.msg =-SERVICE is not running at this moment. Try few minutes later.
#reserve.stock.service.not.running.exception = RESERVE-STOCK
#stock.service.not.running.exception = STOCK
#payment.service.not.running.exception = PAYMENT
#revenue.service.not.running.exception = REVENUE
#
#unique.constraint.violation.sql.code =23000
#unique.constraint.violation.order.service.impl = Do not attempt to create new orders on existing orders. Already exists!
#
#order.not.found.exception = Order not found!
#order.not.approved.exception = Order could not be approved! This is why, it can't be prepared:
#order.not.canceled.exception = Order could not be canceled! This is why, it can't be canceled:
#order.not.canceled.exception.v2 = Order could not be canceled! There has been an error during cancellation process.
#order.already.canceled.exception = Order is already canceled!
#order.not.delivered.exception = Order can't be delivered! Reason:
#order.already.delivered.exception = Order is already delivered!
#order.not.given.to.cargo.company.exception = Order could not be given to the cargo company. Reason:



